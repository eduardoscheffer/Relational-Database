psql --username=freecodecamp --dbname=postgres === comando usado pra entrar no terminal especifico psql;

\l === lista quais bancos de dados existem;

CREATE DATABASE first_database === cria a db;

\c === comando pra conectar/entrar na db pra adicionar informações;

CREATE TABLE table_name() === cria a tabela dentro da database;

\d === lista mostra as tables dentro da db;
\d table_name === mostra os detalhes da table;

ALTER TABLE table_name ADD COLUMN column_name DATATYPE === adiciona uma coluna na table e indica o tipo de dado usado (datatype);

ALTER TABLE table_name DROP COLUMN column_name === usado pra remover a coluna especificada;

ALTER TABLE table_name RENAME COLUMN column_name TO new_name === usado pra renomear uma coluna;

INSERT INTO table_name(column1, column2) VALUES(value1, value2) === usado pra adicionar valores a colunas da table;

INSERTO INTO table_name(column1, column2, column3)
VALUES('Mario', 'Mushroom Kingdom', 'Red'),
('Luigi', 'Mushroom Kingdom', 'Green'),
('Peach', 'Mushroom Kingdom', 'Pink') === usado pra adicionar varios rows de uma vez so nas colunas da table;

SELECT columns(nome da column - '*' pra listar todas) FROM table_name === usado pra ver a(s) coluna(s) da table;

SELECT columns FROM table_name ORDER BY column_name === usado pra ver a(s) coluna(s) em ordem especifica;

DELETE FROM table_name WHERE condition;

DROP TABLE table_name === deleta a tabela da db;

ALTER DATABASE database_name RENAME TO new_database_name === altera o nome da db;

DROP DATABASE database_name === deleta a db;

UPDATE table_name SET column_name=new_value WHERE conditio === atualiza um valor dentro da tabela;

ALTER TABLE table_name ADD PRIMARY KEY(column_name) === elege uma coluna pra ser a primary key da table;

ALTER TABLE table_name DROP CONSTRAINT constraint_name === usado pra deletar uma primary_key de uma tabela;

ALTER TABLE table_name ADD COLUMN column_name TYPE REFERENCES table_name(column_referenced) === adiciona uma coluna e cria como sendo uma foreign key (relaciona a tabela com outra por meio dessa coluna);

ALTER TABLE table_name ADD FOREIGN KEY(column_name) REFERENCES rerenced_table(referenced_column) === seta uma coluna (já criada) de uma table pra ser a foreign key;

ALTER TABLE table_name ALTER COLUMN column_name SET NOT NULL === coloca a coluna para ser not null (não pode ser vazia);

CREATE TABLE table_name(column_name TYPE PRIMARY KEY?) === usado pra criar uma tabela e ja adicionar a primeira coluna com um unico comando;

SELECT columns FROM table_1 FULL JOIN table_2 ON table_1.primary_key_column = table_2.foreig_key_column === usado pra linkar tabelas e trazer informações de outras tabelas baseada na info de uma.Ex:
SELECT birthday FROM more_info FULL JOIN characters ON more_info.character_id = characters.character_id WHERE name='Mario'

TRUNCATE <table_name> === usado pra deletar TODOS os dados da table.

cat <filename> === printa no terminal o conteudo do arquivo

pg_dump --clean --create --inserts --username=freecodecamp <database_name> <filename.sql> === usado prra criar um dump da database num arquivo .sql. Salva todos os comandos necessários pra fazer um rebuild da database;

psql -U postgres < students.sql; === usado pra fazer a restauração da database students, salve anteriormente no arquivo students.sql

WHERE <column> LIKE '<pattern>' === usado pra achar na coluna qualquer coisa que de match com o pattern informado. Ex: SELECT * FROM courses WHERE course LIKE '_lgorithms'; => vai selecionar as que derem o match com o pattens passado (o _ sigfnifica qualquer caracter). Outro ex: SELECT * FROM courses WHERE course ILIKE 'Web%'; => vai selecionar todos os cursos que comecem com 'Web' ou 'web', o I antes do LIKE torna o pattern não sensitivo.

WHERE <column> IS NULL === usado pra acessar locais da coluna onde a info é nulla ou vazia;

SELECT MIN(<column>) FROM <table> === usado pra encontrar o menor valor numérico da coluna, a opção MAX(<column>) faz o mesmo so que retorna o máximo;

SELECT SUM(<column>) FROM <table> === usado pra retornar a soma da coluna de valores numéricos;

SELECT AVG(<column>) FROM <table> === usado pra retornar a media da coluna de valores numérico;
SELECT ROUND(AVG(<column>), 3) FROM <table> === usado pra retornar a media da coluna de valores numérico com o valor arredondado pro valor inteiro mais proximo, com 3 casas decimais;

SELECT COUNT(*) FROM <table> === usado pra contar quantas entries tem na table;

SELECT <column1>, MIN(<column>) FROM <table> GROUP BY <column1> === usado pra agrupar respostas por colunas, por ex: SELECT major_id, MIN(gpa) FROM students GROUP BY major_id => retorna o valor minimo da nota de cada major_id.

SELECT * FROM <table_1> FULL JOIN <table_2> ON <table_1>.<foreign_key_column> = <table_2>.<foreign_key_column>; === usado pra fazer o JOIN entre duas tabelas que tem uma coluna em comum (foreign key);

